#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

bool compare_roads(const vector<int> & a, const vector<int> & b) {
    return a[2] > b[2];
}

vector <bool> color;        // vertex color

vector <int> connections;   // connection with the red vertex

int search(int id) {
    if (id == connections[id]) {
        return id;
    }
    return connections[id] = search(connections[id]);
}

void unite(int a, int b) {
    a = search(a);
    b = search(b);
    
    if (a == b) {
        return;
    }
    
    if (color[a] == 1) {
        connections[b] = a;
    } 
    
    else {
        connections[a] = b;
    }
}

int minTime(vector<vector<int>> roads, vector<int> machines) {
    
    sort(roads.begin(), roads.end(), compare_roads);
    
    int m = roads.size();
    int n = m + 1;
    
    color.assign(n, 0);
    connections.assign(n, 0);
    
    int res = 0;
    
    for (int i = 0; i < machines.size(); ++i) {
        color[machines[i]] = 1;
    }
    
    for (int i = 0; i < n; ++i) {
        connections[i] = i;
    }
    
    for (int i = 0; i < m; ++i) {
        
        const vector<int> & cur = roads[i];
        
        if (!color[search(cur[0])] || !color[search(cur[1])]) {
            unite(cur[0], cur[1]);
        } 
        else {
            res += cur[2];
        }
    }

    return res;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string nk_temp;
    getline(cin, nk_temp);

    vector<string> nk = split_string(nk_temp);

    int n = stoi(nk[0]);

    int k = stoi(nk[1]);

    vector<vector<int>> roads(n - 1);
    for (int i = 0; i < n - 1; i++) {
        roads[i].resize(3);

        for (int j = 0; j < 3; j++) {
            cin >> roads[i][j];
        }

        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }

    vector<int> machines(k);

    for (int i = 0; i < k; i++) {
        int machines_item;
        cin >> machines_item;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        machines[i] = machines_item;
    }

    int result = minTime(roads, machines);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
